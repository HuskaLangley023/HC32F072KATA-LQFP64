<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Outputs\Objects\test1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Outputs\Objects\test1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Sun Oct 20 15:43:47 2024
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; $Super$$main &rArr; W5500_Init &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[17]">Dummy_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">Dummy_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_DAC_IRQHandler</a> from interrupts_hc32f072.o(.text.ADC_DAC_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[20]">CAN_IRQHandler</a> from interrupts_hc32f072.o(.text.CAN_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[22]">CLKTRIM_CTS_IRQHandler</a> from interrupts_hc32f072.o(.text.CLKTRIM_CTS_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[a]">DMAC_IRQHandler</a> from interrupts_hc32f072.o(.text.DMAC_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[17]">Dummy_Handler</a> from startup_hc32f072.o(.text) referenced 4 times from startup_hc32f072.o(RESET)
 <LI><a href="#[21]">FLASH_RAM_IRQHandler</a> from interrupts_hc32f072.o(.text.FLASH_RAM_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[28]">Gpio_Init</a> from gpio.o(.text.Gpio_Init) referenced from main.o(.text.main)
 <LI><a href="#[29]">Gpio_SetAfMode</a> from gpio.o(.text.Gpio_SetAfMode) referenced from main.o(.text.main)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupts_hc32f072.o(.text.HardFault_Handler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[12]">I2C0_IRQHandler</a> from interrupts_hc32f072.o(.text.I2C0_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[13]">I2C1_IRQHandler</a> from interrupts_hc32f072.o(.text.I2C1_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[e]">LPUART0_IRQHandler</a> from interrupts_hc32f072.o(.text.LPUART0_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[f]">LPUART1_IRQHandler</a> from interrupts_hc32f072.o(.text.LPUART1_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_hc32f072.o(.text) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[1b]">PCA_IRQHandler</a> from interrupts_hc32f072.o(.text.PCA_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[6]">PORTA_IRQHandler</a> from interrupts_hc32f072.o(.text.PORTA_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[7]">PORTB_IRQHandler</a> from interrupts_hc32f072.o(.text.PORTB_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[8]">PORTC_E_IRQHandler</a> from interrupts_hc32f072.o(.text.PORTC_E_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[9]">PORTD_F_IRQHandler</a> from interrupts_hc32f072.o(.text.PORTD_F_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_hc32f072.o(.text) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_hc32f072.o(.text) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[10]">SPI0_I2S0_IRQHandler</a> from interrupts_hc32f072.o(.text.SPI0_I2S0_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[11]">SPI1_I2S1_IRQHandler</a> from interrupts_hc32f072.o(.text.SPI1_I2S1_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_hc32f072.o(.text) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[26]">SetBit</a> from ddl.o(.text.SetBit) referenced from gpio.o(.text.Gpio_Init)
 <LI><a href="#[2a]">Spi_SetCS</a> from spi.o(.text.Spi_SetCS) referenced from main.o(.text.main)
 <LI><a href="#[5]">SysTick_Handler</a> from interrupts_hc32f072.o(.text.SysTick_Handler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[27]">Sysctrl_SetPeripheralGate</a> from sysctrl.o(.text.Sysctrl_SetPeripheralGate) referenced from main.o(.text.main)
 <LI><a href="#[24]">SystemInit</a> from system_hc32f072.o(.text.SystemInit) referenced from startup_hc32f072.o(.text)
 <LI><a href="#[14]">TIM0_IRQHandler</a> from interrupts_hc32f072.o(.text.TIM0_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[15]">TIM1_IRQHandler</a> from interrupts_hc32f072.o(.text.TIM1_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[16]">TIM2_IRQHandler</a> from interrupts_hc32f072.o(.text.TIM2_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[b]">TIM3_IRQHandler</a> from interrupts_hc32f072.o(.text.TIM3_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[18]">TIM4_IRQHandler</a> from interrupts_hc32f072.o(.text.TIM4_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[19]">TIM5_IRQHandler</a> from interrupts_hc32f072.o(.text.TIM5_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[1a]">TIM6_IRQHandler</a> from interrupts_hc32f072.o(.text.TIM6_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[c]">UART0_2_IRQHandler</a> from interrupts_hc32f072.o(.text.UART0_2_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[d]">UART1_3_IRQHandler</a> from interrupts_hc32f072.o(.text.UART1_3_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[1f]">USBFS_IRQHandler</a> from interrupts_hc32f072.o(.text.USBFS_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[1e]">VC0_1_2_LVD_IRQHandler</a> from interrupts_hc32f072.o(.text.VC0_1_2_LVD_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[1c]">WDT_IRQHandler</a> from interrupts_hc32f072.o(.text.WDT_IRQHandler) referenced from startup_hc32f072.o(RESET)
 <LI><a href="#[2b]">WIZCHIP_READ_BUF</a> from w5500.o(.text.WIZCHIP_READ_BUF) referenced from wizchip_conf.o(.text.wizchip_sw_reset)
 <LI><a href="#[2c]">WIZCHIP_WRITE_BUF</a> from w5500.o(.text.WIZCHIP_WRITE_BUF) referenced from wizchip_conf.o(.text.wizchip_sw_reset)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f072.o(.text)
 <LI><a href="#[23]">main</a> from system_hc32f072.o(.text.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[31]">wizchip_bus_readbyte</a> from wizchip_conf.o(.text.wizchip_bus_readbyte) referenced from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[32]">wizchip_bus_writebyte</a> from wizchip_conf.o(.text.wizchip_bus_writebyte) referenced from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[2d]">wizchip_cris_enter</a> from wizchip_conf.o(.text.wizchip_cris_enter) referenced from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[2e]">wizchip_cris_exit</a> from wizchip_conf.o(.text.wizchip_cris_exit) referenced from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[30]">wizchip_cs_deselect</a> from wizchip_conf.o(.text.wizchip_cs_deselect) referenced from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[2f]">wizchip_cs_select</a> from wizchip_conf.o(.text.wizchip_cs_select) referenced from wizchip_conf.o(.data.WIZCHIP)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[35]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f072.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f072.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f072.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Dummy_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f072.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dummy_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dummy_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[38]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[36]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system_hc32f072.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; $Super$$main &rArr; W5500_Init &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_DAC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.ADC_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DAC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac_IRQHandler (Weak Reference)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>App_PortInit</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, main.o(.text.App_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = App_PortInit &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[44]"></a>App_UartCfg</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, main.o(.text.App_UartCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = App_UartCfg &rArr; Uart_Init &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9b]"></a>CAN_FilterConfig</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, can.o(.text.CAN_FilterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_FilterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[20]"></a>CAN_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_IRQHandler &rArr; Can_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>CAN_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, can.o(.text.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[4e]"></a>CAN_IrqCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, can.o(.text.CAN_IrqCmd))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[4d]"></a>CAN_IrqFlgClr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can.o(.text.CAN_IrqFlgClr))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>CAN_IrqFlgGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can.o(.text.CAN_IrqFlgGet))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>CAN_Receive</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, can.o(.text.CAN_Receive))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_IRQHandler
</UL>

<P><STRONG><a name="[22]"></a>CLKTRIM_CTS_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.CLKTRIM_CTS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLKTRIM_CTS_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cts_IRQHandler (Weak Reference)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkTrim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>Can_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text.Can_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Can_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IrqFlgClr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IrqFlgGet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IrqCmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>DMAC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.DMAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMAC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dmac_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EnableNvic</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, interrupts_hc32f072.o(.text.EnableNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[21]"></a>FLASH_RAM_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.FLASH_RAM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_RAM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ram_IRQHandler (Weak Reference)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>GetBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ddl.o(.text.GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
</UL>

<P><STRONG><a name="[53]"></a>Gpio_ClrIO</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text.Gpio_ClrIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_ClrIO
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[28]"></a>Gpio_Init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, gpio.o(.text.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PortInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[29]"></a>Gpio_SetAfMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text.Gpio_SetAfMode))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PortInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[54]"></a>Gpio_WriteOutputIO</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text.Gpio_WriteOutputIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_WriteOutputIO
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, interrupts_hc32f072.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>I2C0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>I2C1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.LPUART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PCA_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.PCA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PORTA_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.PORTA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortA_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PORTB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.PORTB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTB_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PORTC_E_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.PORTC_E_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTC_E_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortE_IRQHandler (Weak Reference)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortC_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PORTD_F_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.PORTD_F_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTD_F_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortF_IRQHandler (Weak Reference)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortD_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>Reset_RstPeripheral0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, reset.o(.text.Reset_RstPeripheral0))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[10]"></a>SPI0_I2S0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.SPI0_I2S0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_I2S0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2s0_IRQHandler (Weak Reference)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI1_I2S1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.SPI1_I2S1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_I2S1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2s1_IRQHandler (Weak Reference)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SetBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ddl.o(.text.SetBit))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text.Gpio_Init)
</UL>
<P><STRONG><a name="[99]"></a>Spi_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(.text.Spi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9c]"></a>Spi_ReceiveBuf</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spi.o(.text.Spi_ReceiveBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi_ReceiveBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9d]"></a>Spi_SendBuf</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, spi.o(.text.Spi_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi_SendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2a]"></a>Spi_SetCS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi.o(.text.Spi_SetCS))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Sysctrl_ClkSourceEnable</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, sysctrl.o(.text.Sysctrl_ClkSourceEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sysctrl_ClkSourceEnable &rArr; delay10us &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[67]"></a>Sysctrl_GetHClkFreq</STRONG> (Thumb, 212 bytes, Stack size 28 bytes, sysctrl.o(.text.Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[45]"></a>Sysctrl_GetPClkFreq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sysctrl.o(.text.Sysctrl_GetPClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
</UL>

<P><STRONG><a name="[27]"></a>Sysctrl_SetPeripheralGate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(.text.Sysctrl_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPeripheralGate
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PortInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[95]"></a>Sysctrl_SetXTHFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctrl.o(.text.Sysctrl_SetXTHFreq))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[97]"></a>Sysctrl_SetXTHStableTime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctrl.o(.text.Sysctrl_SetXTHStableTime))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[68]"></a>Sysctrl_SysClkSwitch</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(.text.Sysctrl_SysClkSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[96]"></a>Sysctrl_XTHDriverCfg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctrl.o(.text.Sysctrl_XTHDriverCfg))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[69]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_hc32f072.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_hc32f072.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIM0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.TIM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.TIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim4_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim5_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim6_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UART0_2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.UART0_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_2_IRQHandler &rArr; Uart0_IRQHandler &rArr; Uart_ClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_IRQHandler (Weak Reference)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART1_3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.UART1_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_IRQHandler (Weak Reference)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USBFS_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.USBFS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBFS_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usbfs_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Uart0_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, main.o(.text.Uart0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart0_IRQHandler &rArr; Uart_ClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataIt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_2_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>Uart_ClrStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text.Uart_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_ClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>Uart_DisableIrq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text.Uart_DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_DisableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>Uart_EnableFunc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart.o(.text.Uart_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_EnableFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[48]"></a>Uart_EnableIrq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart.o(.text.Uart_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_EnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>Uart_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(.text.Uart_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>Uart_Init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, uart.o(.text.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Uart_Init &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
</UL>

<P><STRONG><a name="[76]"></a>Uart_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text.Uart_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>Uart_SendDataIt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text.Uart_SendDataIt))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_IRQHandler
</UL>

<P><STRONG><a name="[1e]"></a>VC0_1_2_LVD_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.VC0_1_2_LVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VC0_1_2_LVD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lvd_IRQHandler (Weak Reference)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc2_IRQHandler (Weak Reference)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc1_IRQHandler (Weak Reference)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc0_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>W5500_Init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, main.o(.text.W5500_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = W5500_Init &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1c]"></a>WDT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32f072.o(.text.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f072.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>WIZCHIP_READ</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, w5500.o(.text.WIZCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[2b]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, w5500.o(.text.WIZCHIP_READ_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.wizchip_sw_reset)
</UL>
<P><STRONG><a name="[8e]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, w5500.o(.text.WIZCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[2c]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, w5500.o(.text.WIZCHIP_WRITE_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.wizchip_sw_reset)
</UL>
<P><STRONG><a name="[84]"></a>ctlwizchip</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, wizchip_conf.o(.text.ctlwizchip))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[43]"></a>ddl_memclr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ddl.o(.text.ddl_memclr))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PortInit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[66]"></a>delay10us</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ddl.o(.text.delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay10us &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>

<P><STRONG><a name="[94]"></a>delay1ms</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ddl.o(.text.delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay1ms &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[3f]"></a>$Super$$main</STRONG> (Thumb, 636 bytes, Stack size 72 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = $Super$$main &rArr; W5500_Init &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UartCfg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PortInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RstPeripheral0
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReceiveBuf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SendBuf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IrqCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTHFreq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTHStableTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTHDriverCfg
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>wizchip_bus_readbyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_bus_readbyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[32]"></a>wizchip_bus_writebyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_bus_writebyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[87]"></a>wizchip_clrinterrupt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_clrinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_clrinterrupt &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[2d]"></a>wizchip_cris_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cris_enter))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[2e]"></a>wizchip_cris_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cris_exit))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[30]"></a>wizchip_cs_deselect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cs_deselect))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[2f]"></a>wizchip_cs_select</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cs_select))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[8b]"></a>wizchip_getinterrupt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_getinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_getinterrupt &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[8d]"></a>wizchip_getinterruptmask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_getinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_getinterruptmask &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[82]"></a>wizchip_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wizchip_conf.o(.text.wizchip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[8c]"></a>wizchip_setinterruptmask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_setinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_setinterruptmask &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[83]"></a>wizchip_setnetinfo</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_setnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wizchip_setnetinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[86]"></a>wizchip_sw_reset</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, wizchip_conf.o(.text.wizchip_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wizchip_sw_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[89]"></a>wizphy_getphyconf</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_getphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_getphyconf &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[92]"></a>wizphy_getphylink</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_getphylink))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_getphylink &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[8a]"></a>wizphy_getphypmode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_getphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_getphypmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[90]"></a>wizphy_reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[88]"></a>wizphy_setphyconf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_setphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_setphyconf &rArr; wizphy_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[91]"></a>wizphy_setphypmode</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizphy_setphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizphy_setphypmode &rArr; wizphy_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ab]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>Adc_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DAC_IRQHandler
</UL>

<P><STRONG><a name="[4a]"></a>ClkTrim_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKTRIM_CTS_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>Cts_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKTRIM_CTS_IRQHandler
</UL>

<P><STRONG><a name="[41]"></a>Dac_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DAC_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>Dmac_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAC_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>Flash_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_RAM_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>I2c0_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>I2c1_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>I2s0_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_I2S0_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>I2s1_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_I2S1_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>LpUart0_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>LpUart1_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>Lvd_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VC0_1_2_LVD_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>Pca_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>PortA_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>PortB_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTB_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>PortC_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_E_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>PortD_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_F_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>PortE_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_E_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>PortF_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_F_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>Ram_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_RAM_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>Spi0_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_I2S0_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>Spi1_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_I2S1_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>SysTick_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6a]"></a>Tim0_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>Tim1_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>Tim2_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>Tim3_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>Tim4_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>Tim5_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>Tim6_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>Uart1_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_3_IRQHandler
</UL>

<P><STRONG><a name="[71]"></a>Uart2_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_2_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>Uart3_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_3_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>Usbfs_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>Vc0_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VC0_1_2_LVD_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>Vc1_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VC0_1_2_LVD_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>Vc2_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VC0_1_2_LVD_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>Wdt_IRQHandler</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>
<HR></body></html>
